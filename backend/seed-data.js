/**
 * Script para inyectar datos de prueba
 * Genera 5 equipos con ~14 ni√±os cada uno para testing
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Configuraci√≥n de la base de datos
const dbPath = path.join(__dirname, 'database.sqlite');
const db = new sqlite3.Database(dbPath);

// Datos de equipos de prueba
const equipos = [
  {
    nombre: 'Los Tigres',
    descripcion: 'Equipo de f√∫tbol juvenil categor√≠a sub-12',
    color: '#FF6B35'
  },
  {
    nombre: '√Åguilas Doradas',
    descripcion: 'Equipo de b√°squet mixto',
    color: '#4ECDC4'
  },
  {
    nombre: 'Leones Valientes',
    descripcion: 'Equipo de handball competitivo',
    color: '#45B7D1'
  },
  {
    nombre: 'Estrellas Azules',
    descripcion: 'Equipo de nataci√≥n escolar',
    color: '#9B59B6'
  },
  {
    nombre: 'Rayos Veloces',
    descripcion: 'Equipo de atletismo y carreras',
    color: '#F39C12'
  }
];

// Nombres y apellidos para generar ni√±os
const nombres = [
  'Santiago', 'Valentina', 'Mateo', 'Isabella', 'Nicol√°s', 'Sof√≠a', 'Samuel', 'Camila',
  'Daniel', 'Martina', 'Alejandro', 'Valeria', 'Diego', 'Luc√≠a', 'Sebasti√°n', 'Emma',
  'Mat√≠as', 'Abril', 'Lucas', 'Olivia', 'Tom√°s', 'Julieta', 'Joaqu√≠n', 'Renata',
  'Benjam√≠n', 'Victoria', 'Emilio', 'Antonella', 'Agust√≠n', 'Florencia', 'Felipe', 'Catalina',
  'Ignacio', 'Constanza', 'Maximiliano', 'Amparo', 'Rodrigo', 'Esperanza', 'Adri√°n', 'Pilar',
  'Facundo', 'Magdalena', 'Thiago', 'Delfina', 'Lautaro', 'Josefina', 'Bautista', 'Milagros',
  'Gael', 'Amanda', 'Ian', 'Julieta', 'Santino', 'Roc√≠o', 'Bruno', 'Agustina',
  'Vicente', 'Emilia', 'Lorenzo', 'Guadalupe', 'Valent√≠n', 'Francesca', 'Enzo', 'Bethania'
];

const apellidos = [
  'Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez', 'S√°nchez', 'P√©rez',
  'G√≥mez', 'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno', '√Ålvarez',
  'Mu√±oz', 'Romero', 'Alonso', 'Guti√©rrez', 'Navarro', 'Torres', 'Dom√≠nguez', 'V√°zquez',
  'Ramos', 'Gil', 'Ram√≠rez', 'Serrano', 'Blanco', 'Su√°rez', 'Molina', 'Morales',
  'Ortega', 'Delgado', 'Castro', 'Ortiz', 'Rubio', 'Mar√≠n', 'Sanz', 'Iglesias',
  'Medina', 'Garrido', 'Cort√©s', 'Castillo', 'Santos', 'Lozano', 'Guerrero', 'Cano'
];

const estadosFisicos = ['En forma', 'Lesionado'];
const condicionesPago = ['Al dia', 'En deuda'];

// Funci√≥n para generar fecha de nacimiento aleatoria (entre 5 y 18 a√±os)
function generarFechaNacimiento() {
  const hoy = new Date();
  const a√±oActual = hoy.getFullYear();
  const a√±oNacimiento = a√±oActual - Math.floor(Math.random() * 14) - 5; // Entre 5 y 18 a√±os
  const mes = Math.floor(Math.random() * 12) + 1;
  const dia = Math.floor(Math.random() * 28) + 1; // Usamos 28 para evitar problemas con febrero
  
  return `${a√±oNacimiento}-${mes.toString().padStart(2, '0')}-${dia.toString().padStart(2, '0')}`;
}

// Funci√≥n para obtener elemento aleatorio de un array
function obtenerAleatorio(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// Funci√≥n para generar un ni√±o
function generarNino(teamId) {
  return {
    nombre: obtenerAleatorio(nombres),
    apellido: obtenerAleatorio(apellidos),
    fecha_nacimiento: generarFechaNacimiento(),
    estado_fisico: obtenerAleatorio(estadosFisicos),
    condicion_pago: obtenerAleatorio(condicionesPago),
    team_id: teamId
  };
}

// Funci√≥n principal para insertar datos
async function insertarDatosPrueba() {
  return new Promise((resolve, reject) => {
    console.log('üöÄ Iniciando inserci√≥n de datos de prueba...');
    
    db.serialize(() => {
      // Limpiar datos existentes (opcional)
      console.log('üßπ Limpiando datos existentes...');
      db.run('DELETE FROM children');
      db.run('DELETE FROM teams');
      
      // Insertar equipos
      console.log('‚öΩ Insertando equipos...');
      const insertTeamStmt = db.prepare('INSERT INTO teams (nombre, descripcion, color) VALUES (?, ?, ?)');
      
      equipos.forEach((equipo, index) => {
        insertTeamStmt.run(equipo.nombre, equipo.descripcion, equipo.color);
        console.log(`‚úÖ Equipo "${equipo.nombre}" insertado`);
      });
      
      insertTeamStmt.finalize();
      
      // Insertar ni√±os
      console.log('üë∂ Insertando ni√±os...');
      const insertChildStmt = db.prepare('INSERT INTO children (nombre, apellido, fecha_nacimiento, estado_fisico, condicion_pago, team_id) VALUES (?, ?, ?, ?, ?, ?)');
      
      let totalNinos = 0;
      
      for (let teamId = 1; teamId <= 5; teamId++) {
        const cantidadNinos = Math.floor(Math.random() * 5) + 12; // Entre 12 y 16 ni√±os por equipo
        
        for (let i = 0; i < cantidadNinos; i++) {
          const nino = generarNino(teamId);
          insertChildStmt.run(
            nino.nombre,
            nino.apellido,
            nino.fecha_nacimiento,
            nino.estado_fisico,
            nino.condicion_pago,
            nino.team_id
          );
          totalNinos++;
        }
        
        console.log(`‚úÖ ${cantidadNinos} ni√±os insertados en equipo ${teamId}`);
      }
      
      insertChildStmt.finalize();
      
      console.log(`üéâ ¬°Datos de prueba insertados exitosamente!`);
      console.log(`üìä Total: ${equipos.length} equipos y ${totalNinos} ni√±os`);
      
      // Verificar inserci√≥n
      db.get('SELECT COUNT(*) as total_equipos FROM teams', (err, row) => {
        if (err) {
          reject(err);
          return;
        }
        
        db.get('SELECT COUNT(*) as total_ninos FROM children', (err, row2) => {
          if (err) {
            reject(err);
            return;
          }
          
          console.log(`‚úÖ Verificaci√≥n: ${row.total_equipos} equipos y ${row2.total_ninos} ni√±os en la base de datos`);
          resolve();
        });
      });
    });
  });
}

// Ejecutar si se llama directamente
if (require.main === module) {
  insertarDatosPrueba()
    .then(() => {
      console.log('üéØ Datos de prueba listos para testing');
      db.close();
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error al insertar datos:', error);
      db.close();
      process.exit(1);
    });
}

module.exports = { insertarDatosPrueba };
